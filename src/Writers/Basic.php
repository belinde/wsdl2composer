<?php

namespace Wsdl2Composer\Writers;

use Wsdl2Composer\Definitions\ClassDefinition;
use Wsdl2Composer\Definitions\PropertyDefinition;
use Wsdl2Composer\Definitions\GenericInfo;
/**
 * Description of Basic
 *
 * @author belinde
 */
class Basic extends AbstractWriter {

    private function docBlock( GenericInfo $obj ) {
        if ( $obj->getShortDescription() or $obj->getLongDescription() or $obj->getMetaInfos() ) {
            $this->write( '/**' );
            $this->write( ' * ' . $obj->getShortDescription() );
            if ( $obj->getLongDescription() ) {
                $this->write( ' *' );
                $this->write( ' * ' . $obj->getLongDescription() );
            }
            if ( $obj->getMetaInfos() ) {
                $this->write( ' *' );
                foreach ( $obj->getMetaInfos() as $key => $value ) {
                    $this->write( " * @$key $value" );
                }
            }
            $this->write( ' **/' );
        }
    }

    private function property( PropertyDefinition $property ) {
        $this->write();
        $this->docBlock( $property );
        switch ( $property->getVisibility() ) {
            case PropertyDefinition::V_PROTECTED :
                $visibility = 'protected';
                break;
            case PropertyDefinition::V_PRIVATE :
                $visibility = 'private';
                break;
            default:
                $visibility = 'public';
        }
        $this->write(
                sprintf(
                        '%s $%s = %s;', $visibility, $property->getName(), var_export( $property->getDefaultValue()
                                , true )
        ) );
    }

    protected function doDump( ClassDefinition $definition ) {
        $this->write( '/**' );
        $this->write( ' * File for class ' . $definition->getFullName() );
        $this->write( ' * Generated by Wsdl2Composer at ' . date( DATE_W3C ) );
        $this->write( ' **/' );
        if ( $definition->getNamespace() ) {
            $this->write();
            $this->write( sprintf( "namespace %s;", $definition->getNamespace() ) );
        }
        $this->write();
        $this->docBlock( $definition );
        $this->write( sprintf( "class %s {", $definition->getBaseName() ) );

        $this->indentPlus();
        foreach ( $definition->getProperties() as $property ) {
            $this->property( $property );
        }

        $this->indentMinus();
        $this->write( "}" );
    }

}
